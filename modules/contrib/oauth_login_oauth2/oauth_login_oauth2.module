<?php
use Drupal\Core\Form\FormStateInterface;
/**
 * @file
 * Module file for miniOrange OAuth login Module.
 */

use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function oauth_login_oauth2_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match){
  switch ($route_name) {
    case 'help.page.oauth_login_oauth2':
      $url = Url::fromRoute('user.admin_index')->toString();
      $moduleLink = $url . '/oauth_login_oauth2/config_clc';
      $supoortLink = $url . 'oauth_login_oauth2/request_for_demo';

      $moduleLandingPage = 'https://plugins.miniorange.com/drupal-sso-oauth-openid-single-sign-on';
      $setup_guides = 'https://plugins.miniorange.com/guide-to-enable-miniorange-oauth-client-for-drupal';

      $output = '';
      $output .= '<h3>' . t('About <a target="_blank" href="' . $moduleLandingPage . '">[Know more]</a>') . '</h3>';
      $output .= '<p>' . t('Drupal OAuth & OpenID Connect Login - OAuth2 Client SSO Login module for Drupal Single Sign-On allows users to login into Drupal with OAuth 2.0 and OpenID compliant applications such as Azure AD, Azure B2C, AWS Cognito, Google, Discord, Microsoft, Keycloak, OKTA, Salesforce, Wild Apricot, WHMCS, etc.  This module allows your Drupal site to act as a OAuth Login which can be configured to establish the trust between the Drupal site and various OAuth/OpenID Connect providers to securely authenticate the user into the Drupal site.') . '</p>';
      $output .= '<h3>' . t('Configuration') . '</h3>';
      $output .= '<p>' . t('Configure miniOrange OAuth Login under Configuration » <a target = "_blank" href=" ' . $url . ' ">People</a> » <a target = "_blank" href=" ' . $moduleLink . ' ">miniOrange OAuth/OIDC Login Configuration</a>:') . '</p>';
      $output .= '<p>
                           <ol>
                              <li>' . t('In the <a target="_blank" href="' . $moduleLink . '">Configure Application tab </a> of the module, you can configure your OAuth provider. You can also refer these <a target="_blank" href="' . $setup_guides . '">Setup Guides</a>.') . '</li>
                              <li>' . t('Once the configuration is done, please click on the <strong>Test Configuration</strong> button on the same page to confirm the configurations.') . '</li>
                              <li>' . t('If you need any assistance, just send us a query at <a href="mailto:drupalsupport@xecurify.com?subject=Drupal OAuth Login module - Need assistance">drupalsupport@xecurify.com</a> and we will get back to you very soon.') . '</li>
                           </ol>
                        </p>';
      $output .= '<h3>' . t('Setup Guides') . '</h3>';
      $output .= '<p>' . t('Click <a target="_blank" href="' . $setup_guides . '">here</a> to check out the setup guides for different OAuth/OpenID providers.') . '</p>';

      return $output;
  }
}

/**
* Implements hook_form_alter().
*/

function oauth_login_oauth2_form_alter(&$form, FormStateInterface &$form_state, $form_id)
{
  global $base_url;
  $enable_login = \Drupal::config('oauth_login_oauth2.settings')->get('miniorange_oauth_enable_login_with_oauth');
  if (!empty(\Drupal::config('oauth_login_oauth2.settings')->get('miniorange_oauth_client_base_url')))
    $baseUrlValue = \Drupal::config('oauth_login_oauth2.settings')->get('miniorange_oauth_client_base_url');
  else
    $baseUrlValue = $base_url;
  $display_link = \Drupal::config('oauth_login_oauth2.settings')->get('miniorange_auth_client_display_link');

  if ($enable_login) {
    if ($form_id == 'user_login_block' || $form_id == 'user_login_form') {
      if (!empty($display_link)) {
        $oauth_login_url = $baseUrlValue . '/moLogin';
        $form['loginurl'] = array(
          '#markup' => '<a href="' . $oauth_login_url . '">' . $display_link . '</a>'
        );
      }
    }
  }
  \Drupal::service('page_cache_kill_switch')->trigger();

  if($form_id == 'system_modules_uninstall_confirm_form') {
    $currently_uninstalling_modules = $form['modules']['#items'];
    if(in_array('miniOrange OAuth/OIDC Login ( OAuth/OIDC Client )', $currently_uninstalling_modules)){

      $site_mail         = \Drupal::config('system.site')->get('mail');
      $admin_email       = \Drupal::config('oauth_login_oauth2.settings')->get('miniorange_oauth_client_customer_admin_email');
      $email             = !empty($admin_email) ?  $admin_email : $site_mail;

      $reasons           = ["Not Working","Not Receiving OTP During Registration","Does not have the features I'm looking for","Redirecting back to login page after Authentication","Confusing Interface","Bugs in the module","Other Reasons:"];
      $uninstall_reasons = [];

      foreach($reasons as $key => $value){
        $uninstall_reasons[$value] = $value;
      }

      $form['#attached']['library'][] = 'oauth_login_oauth2/oauth_login_oauth2.admin';

      $form['oauth_login_uninstall_field_set'] = array(
        '#type' => 'fieldset',
      );

      $form['oauth_login_uninstall_field_set']['oauth_login_uninstall_container'] = array(
        '#type' => 'container',
        '#states' => array(
          'visible' => array(
            ':input[name = "miniorange_oauth_skip_feedback"]' => array('checked' => FALSE),),
        ),
      );

      $form['oauth_login_uninstall_field_set']['oauth_login_uninstall_container']['uninstall_form_markup'] = [
        '#markup' => t('<span class="mo_saml_highlight_background_note">Hey, it seems like you want to deactivate the miniOrange OAuth Login Module. What happened?</span><br>'),
      ];

      $form['oauth_login_uninstall_field_set']['oauth_login_uninstall_container']['miniorange_oauth_feedback_email'] = array(
        '#type' => 'email',
        '#title' => 'Email',
        '#required' => false,
        '#default_value' => $email,
        '#states' => array(
          'required' => array(
          ':input[name = "miniorange_oauth_skip_feedback"]' => array('checked' => FALSE),),
        ),
      );

      $form['oauth_login_uninstall_field_set']['oauth_login_uninstall_container']['miniorange_oauth_uninstall_reason'] = array(
        '#type' => 'radios',
        '#options' => $uninstall_reasons,
        '#title' => 'Reason<span id="required_field">*</span>',
      );

      $form['oauth_login_uninstall_field_set']['oauth_login_uninstall_container']['miniorange_oauth_feedback_query'] = array(
        '#type' => 'textarea',
        '#cols' => '60',
        '#rows' => '3',
        '#required' => false,
        '#attributes' => array('style' => 'width: auto','placeholder' => 'Write your query here'),
        '#states' => array(
          'visible' => array(
            ':input[name = "miniorange_oauth_uninstall_reason"]' => array('value' => 'Other Reasons:'),),
        ),
      );

      $form['oauth_login_uninstall_field_set']['miniorange_oauth_skip_feedback'] = array(
        '#type' => 'checkbox',
        '#title' => 'Skip the feedback',
        '#default_value' => false,
      );

      $form['#validate'][] = 'uninstall_oauth_login_form_validate';
    }
  }
}

function uninstall_oauth_login_form_validate(&$form, FormStateInterface &$form_state) {
  $post           = \Drupal::request()->request->all();
  $skip_feedback  = isset($post['miniorange_oauth_skip_feedback']) ? 1 : 0;

  $reason         = isset($post['miniorange_oauth_uninstall_reason']) ? $post['miniorange_oauth_uninstall_reason'] : null;

  if(!$skip_feedback) {
    if(!isset($reason)) {
      $form_state->setErrorByName(
        'uninstall_reason',
        t('Reason field is required'));
    }
  }
}
